#region ejercicio1
function esMarcaSinVisitar(){
    /*
    proposito: devuelve verdadero si la celda no fue visitada anteriormente
    precondicion: -
     */
    return (not esCeldaVisitada())
}
#endregion

#region ejercicio2
/*
proposito: cuentadenota la cantidad de pasos que debe dar el robot hasta la siguiente marca
precondicion: hay una marca sin visitar en direccion dir
*/
function cantidadDePasosEntreMarcas(dir){
    cantidadPasos := 0;
    while(puedeMover(dir) && not hayMarca()){
        cantidadPasos := cantidadPasos + 1;
        Mover(dir);
    }
    return (cantidadPasos)
}
#endregion

#region ejercicio3
/*
proposito: 
*/
function hayMarcaSinVisitarHacia(cantEnergia, dir){
    return (cantidadDePasosEntreMarcas(dir) >= cantEnergia && esMarcaSinVisitar())
}
#endregion

#region ejercicio4
function hayMarcaSinVisitarEnEntorno(energia){
    dir := mindDir();
    while (dir != maxDir() && not hayMarcaSinVisitarHacia(energia, dir)){
        dir := siguiente(dir);
    }
    return (hayMarcaSinVisitarHacia(energia, dir))
}
#endregion

#region ejercicio5
procedure AvanzarASiguienteMarca(dirMarca){
    repeat(cantidadDePasosEntreMarcas(dirMarca)){
        Mover(dirMarca);
    }
}
#endregion

#region ejercicio6
function escapeExitoso(energiaDisponible){
    energiaRestante := energiaDisponible;
    while(not esSalida()){
        dirMarca := direccionMarcaSinVisitarEnEntorno(energiaRestante);
        energiaRestante :=  energiaRestante - cantidadDePasosEntreMarcas(dirMarca);
        AvanzarASiguienteMarca(dirMarca);
    }
    return (energiaDisponible >= energiaRestante)
}

function direccionMarcaSinVisitarEnEntorno(energia){
/*proposito: retorna la direccion hacia la cual hay marca sin visitar */
    dir := mindDir();
    while (dir != maxDir() && not hayMarcaSinVisitarHacia(energia, dir)){
        dir := siguiente(dir);
    }
    return (dir)
}
#endregion

#region ejercicio7
procedure completarRecargas(){
/*
proposito: coloca una bateria alrededor de la celda a actual, exactamente aun rango de 1 celda de distancia si la celda esta vacia.
precondicion: -
*/
    InicializarRecorrdio(Norte, Este);
    while(puedoMoverHacia(Norte, Este)){
        colocarBaterias();
        IrAProximaCelda();
    }
}

procedure colocarBaterias(){
    foreach direccion in [dirMin()..dirMax()]{
        Mover(direccion);
        SiEsVaciaPonerBateria();
        MoverAdyacente(direccion);
        SiEsVaciaPonerBateria();
        RetornarOrigen(direccion);
    }
}

procedure RetornarOrigen(dir){
    Mover(opuesto(siguente(dir)));
    Mover(opuesto(dir));
}

procedure MoverAdyacente(dir){
    Mover(siguente(dir);)
}

procedure SiEsVaciaPonerBateria(){
        if(esVacia()){
            Poner(Azul);
        }
}

function esVacia(){
    return (not hayBolitas(Verde) && not hayBolitas(Rojo) && not hayBolitas(Negro) && not hayBolitas(Azul))
}
#endregion