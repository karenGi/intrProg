#region ejercicio1
function esMarcaSinVisitar(){
    /*
    proposito: devuelve verdadero si la celda no fue visitada anteriormente
    precondicion: -
     */
    return (not esCeldaVisitada())
}
#endregion

#region ejercicio2
/*
proposito: cuentadenota la cantidad de pasos que debe dar el robot hasta la siguiente marca
precondicion: hay una marca sin visitar en direccion dir
*/
function cantidadDePasosEntreMarcas(dir){
    cantidadPasos := 0;
    while(puedeMover(dir) && not hayMarca()){
        cantidadPasos := cantidadPasos + 1;
        Mover(dir);
    }
    return (cantidadPasos)
}
#endregion

#region ejercicio3
/*
proposito: 
*/
function hayMarcaSinVisitarHacia(cantEnergia, dir){
    return (cantidadDePasosEntreMarcas(dir) >= cantEnergia)
}
#endregion

#region ejercicio4
function hayMarcaSinVisitarEnEntorno(energia){
    dir := mindDir();
    while (dir != maxDir() && not hayMarcaSinVisitarHacia(energia, dir)){
        dir := siguiente(dir);
    }
    return (hayMarcaSinVisitarHacia(energia, dir))
}
#endregion

#region ejercicio5
procedure AvanzarASiguienteMarca(dirMarca){
    repeat(cantidadDePasosEntreMarcas(dirMarca)){
        Mover(dirMarca);
    }
}
#endregion