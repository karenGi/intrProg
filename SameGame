function colorPieza(){
/*
proposito: retornar el color de la pieza de la celda actual
precondicion: debe haber una pieza exclusivamente
*/
    colorDePieza := minColor();
    if(hayBolitas(Azul)){ colorDePieza := Verde }
    if(hayBolitas(Rojo)){ colorDePieza := Rojo }
    if(hayBolitas(Negro)){ colorDePieza := Verde }
    if(hayBolitas(Verde)){ colorDePieza := Negro }
    return (colorDePieza)
}

function esVecinoMismoColor(){
    
}

function esPieza(){
    piezaBool := false;
    if (nroVecinos(colorPieza()) > 1 || ){
        piezaBool := true
    }
}

//14
procedure BuscarCasilleroMarcado(){
    while(not esCasilleroMarcado()){
        IrAProximaCelda();
    }
}

procedure ExplotarPiezaMarcada(){
/*
proposito: hace explotar la pieza que se encuentra marcada
precondicion: -
*/
    InicializarRecorrido(Norte, Este):
    while (not hayCasilleroMarcado()){
        BuscarCasilleroMarcado();
        MarcarCasillerosVecinos();
        ExplotarCasillero();
    }
}

procedure AplicarFuerzaDeGravedadACasillero(){
    while(esVaciaProximoCasillero()){
        AplicarGraverdad();
    }
}

function esVaciaProximoCasillero(){
    Mover(Sur);
    return (not hayBolitas(Verde) && not hayBolitas(Rojo) && not hayBolitas(Negro) && not hayBolitas(Azul))
}

procedure AplicarGraverdad(){
    /*
    proposito: desplaza la pieza una celda al sur de la posicion actual
    precondicion: debe haber una pieza
    */
    colorPiezaGravedad := colorPieza();
    Sacar(colorPiezaGravedad);
    Mover(Sur);
    Poner(colorPiezaGravedad);
}